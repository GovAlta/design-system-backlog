name: Update Related Team Issues

on:
  schedule:
    - cron: '0 * * * *'  # Runs every hour
  workflow_dispatch:      # Allows manual triggering from GitHub

jobs:
  update-related-issues:
    runs-on: ubuntu-latest

    steps:
      - name: Use GitHub script to update issues
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = "GovAlta";
            const communityRepo = "design-system-backlog";
            const teamRepo = "ui-components";

            function getTypeFromIssue(issue) {
              if (issue?.type && typeof issue.type === 'object' && issue.type.name) {
                return issue.type.name.toLowerCase();
              }
              if (issue?.issue_type && typeof issue.issue_type === 'object' && issue.issue_type.name) {
                return issue.issue_type.name.toLowerCase();
              }
              return 'other';
            }

            const communityIssues = await github.paginate(
              github.rest.issues.listForRepo,
              { owner, repo: communityRepo, state: "open" }
            );

            for (const communityIssue of communityIssues) {
              const componentName = communityIssue.title.trim();

              const openIssues = await github.paginate(
                github.rest.issues.listForRepo,
                {
                  owner,
                  repo: teamRepo,
                  labels: componentName,
                  state: "open"
                }
              );

              const closedIssues = await github.paginate(
                github.rest.issues.listForRepo,
                {
                  owner,
                  repo: teamRepo,
                  labels: componentName,
                  state: "closed"
                }
              );

              const openList = openIssues.length > 0
                ? openIssues.map(issue => {
                    const type = getTypeFromIssue(issue);
                    return `- [#${issue.number}](${issue.html_url}) (${type}) ${issue.title}`;
                  }).join('\n')
                : "_No related issues found._";

              const closedList = closedIssues.length > 0
                ? closedIssues.map(issue => {
                    const type = getTypeFromIssue(issue);
                    return `- [#${issue.number}](${issue.html_url}) (${type}) ${issue.title}`;
                  }).join('\n')
                : "_No closed issues._";

              const relatedSection = `### Open issues\n${openList}`;
              const closedSection = `#### Closed issues\n${closedList}`;
              const combinedSection = `<!-- related-issues-start -->\n${relatedSection}\n\n${closedSection}\n<!-- related-issues-end -->`;

              const sectionRegex = /<!-- related-issues-start -->[\s\S]*?<!-- related-issues-end -->/i;

              let updatedBody = communityIssue.body || "";
              if (sectionRegex.test(updatedBody)) {
                updatedBody = updatedBody.replace(sectionRegex, combinedSection);
              } else {
                updatedBody += `\n\n${combinedSection}`;
              }

              await github.rest.issues.update({
                owner,
                repo: communityRepo,
                issue_number: communityIssue.number,
                body: updatedBody
              });

              console.log(`âœ… Updated: ${componentName}`);
            }
